name: Solar System Workflow

on: 
    workflow_dispatch: 
    push:
        branches:
            - main
            - 'feature/*'

env:
  MONGO_URI: 'mongodb+srv://supercluster.d83jj.mongodb.net/superData'
  MONGO_USERNAME: ${{ vars.MONGO_USERNAME }}
  MONGO_PASSWORD: ${{ secrets.MONGO_PASSWORD }}
jobs:
    unit-testing:
        name: Unit Testing
        services:
          mongo-db:
            image: siddharth67/mongo-db:non-prod
            ports:
              - 27017:27017
        env:
                MONGO_URI: 'mongodb://localhost:27017/superData'
                MONGO_USERNAME: non-prod-user
                MONGO_PASSWORD: non-prod-password
        strategy:
          matrix:
            nodejs_version: [18,19,20]
            operating_system: [ubuntu-latest]
            exclude:
              - nodejs_version: 18
                operating_system: macos-latest
        runs-on: ${{ matrix.operating_system}}
        steps:
        - name: Checkout Repository
          uses: actions/checkout@v4

        - name: Setup NodeJS Version - ${{matrix.nodejs_version}}
          uses: actions/setup-node@v3
          with:
            node-version: ${{matrix.nodejs_version}}

        - name: Cache npm dependencies
          uses: actions/cache@v3
          with:
            path: node_modules
            key: ${{runner.os}}-node-modules-${{hashFiles('package-lock.json')}}

        - name: Install Dependencies
          run: npm install

        - name: Unit Testing
          run: npm test

        - name: Archive Test Result
          uses: actions/upload-artifact@v3
          with:
            name: Mocha-Test-Result
            path: test-results.xml

    code-coverage:
                name: Code Coverage
                container: 
                  image: node:18
                services:
                    mongo-db:
                      image: siddharth67/mongo-db:non-prod
                      options:
                        --name mongo
                env:
                          MONGO_URI: 'mongodb://mongo:27017/superData'
                          MONGO_USERNAME: non-prod-user
                          MONGO_PASSWORD: non-prod-password
                runs-on: ubuntu-latest
                steps:
                - name: Checkout Repository
                  uses: actions/checkout@v4
        
               # - name: Setup NodeJS Version - 18
               #   uses: actions/setup-node@v3
               #   with:
               #     node-version: 18
        
                - name: Cache npm dependencies
                  uses: actions/cache@v3
                  with:
                      path: node_modules
                      key: ${{runner.os}}-node-modules-${{hashFiles('package-lock.json')}}

                - name: Install Dependencies
                  run: npm install
        
                - name: Check Code Coverage
                  continue-on-error: true
                  run: npm run coverage
        
                - name: Archive Test Result
                  uses: actions/upload-artifact@v3
                  with:
                    name: Code-Coverage-Result
                    path: coverage
                    retention-days: 5

    docker:
        name: Containeraization
        needs: [unit-testing,code-coverage]
        runs-on: ubuntu-latest
        steps:
        - name: Checkout Repo
          uses: actions/checkout@v4

        - name: Dockerhub Login
          uses: docker/login-action@v2.2.0
          with:
            username: ${{vars.DOCKERHUB_USERNAME}}
            password: ${{secrets.DOCKERHUB_PASSWORD}}

        - name: Docker Build For Testing
          uses: docker/build-push-action@v4
          with:
            context: .
            push: false
            tags: ${{vars.DOCKERHUB_USERNAME}}/solar-system:${{github.sha}}

        - name: Docker Image Test
          run: |
            docker images
            docker run --name solar-system-app -d \
               -p 3000:3000 \
               -e MONGO_URI=$MONGO_URI \
               -e MONGO_USERNAME=$MONGO_USERNAME \
               -e MONGO_PASSWORD=$MONGO_PASSWORD \
               ${{vars.DOCKERHUB_USERNAME}}/solar-system:${{github.sha}}

            export IP=$(docker inspect -f '{{range .NetworkSettings.Networks}}{{.IPAddress}}{{end}}' solar-system-app)
            echo $IP

            echo Testing Image URL using wget
            wget -q -O - 127.0.0.1:3000/live | grep live


        - name: Docker Push
          uses: docker/build-push-action@v4
          with:
              context: .
              push: true
              tags: ${{vars.DOCKERHUB_USERNAME}}/solar-system:${{github.sha}}

    dev-deploy:
      needs: docker
      runs-on: ubuntu-latest
      steps:
        - name: Checkout Repo
          uses: actions/checkout@v4

        - name: Install Kubectl
          uses: aws-actions/configure-aws-credentials@v1
          with:
            aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
            aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
            aws-region: us-east-2
  
        - name: Install kubectl
          run: |
            curl -LO https://storage.googleapis.com/kubernetes-release/release/$(curl -s https://storage.googleapis.com/kubernetes-release/release/stable.txt)/bin/linux/amd64/kubectl
            chmod +x ./kubectl
            sudo mv ./kubectl /usr/local/bin/kubectl
  
        - name: Configure kubectl for EKS
          run: |
            aws eks --region us-east-2 update-kubeconfig --name Democluster

       # - name: Fetch Kubernetes Cluster Details
       #   run: kubectl version --short -o yaml
       #    echo -------------------------------------
        #   kubectl get nodes
         
            
        - name: Save Nginx Ingress Controller IP as a GITHUB Environmental Variable
          run: |
           echo "INGRESS_IP=$(kubectl -n ingress-nginx get services ingress-nginx-controller -o jsonpath="{.status.loadBalancer.ingress[0].ip}"" >> $GITHUB_ENV
        
        - name:  Replace tokens in Manifest files
          uses: cschleiden/replace-tokens@v1
          with:
           tokenPrefix: '_{_'
           tokenSuffix: '_}_'
           files: '["kubernetes/development/*.yaml"]'
          env:
           NAMESPACE: ${{vars.NAMESPACE}}
           REPLICAS: ${{vars.REPLICAS}}
           IAMGE: ${{vars.DOCKERHUB_USERNAME}}/solar-system:${{github.sha}}
           INGRESS_IP: ${{env.INGRESS_IP}}

        - name: Check Files
          run: |
           cat kubernetes/development/*.yaml

        - name: Create MongoDB Secret
          run: |
           kubectl -n ${{vars.NAMESPACE}} create secret generic mongo-db-creds \
           --from-literal=MONGO_URI=${{env.MONGO_URI}} \
           --from-literal=MONGO_USERNAME=${{vars.MONGO_USERNAME}} \
           --from-literal=MONGO_PASSWORD=${{secrets.MONGO_PASSWORD}} \
           --save-config \
           --dry-run=client \
           -o yaml | kubectl apply -f -

        - name: Deploy to Dev Env
          run: |
           kubectl apply -f kubernetes/development
